import os
import signal
import psutil
from multiprocessing import Process, Queue
from collections import Counter
import sys
import logging
import multiprocessing
import ctypes
import time
import random
import threading
import fcntl
import errno
from enum import Enum
from queue import Queue

# Enum for representing the state of a process.
class ProcessState(Enum):
    RUNNING = "RUNNING"
    SLEEPING = "SLEEPING"

# Class to control a thread with the ability to pause and resume its execution.
class ControlledThread:
    def __init__(self, target, name):
        self.target = target  # The function to be executed by the thread.
        self.name = name  # Name of the thread for identification.
        self.pause_cond = threading.Condition(threading.Lock())  # Condition variable to support pause/resume.
        self.paused = False  # Initial state is not paused.
        self.thread = threading.Thread(target=self.run_with_pause, name=name)  # The thread to be controlled.

    # Wrapper for the target function that adds pause/resume functionality.
    def run_with_pause(self):
        while True:
            with self.pause_cond:
                while self.paused:
                    self.pause_cond.wait()  # Wait if the thread is paused.
                self.target()  # Execute the target function.

    # Pause the thread execution.
    def pause(self):
        with self.pause_cond:
            self.paused = True

    # Resume the thread execution.
    def resume(self):
        with self.pause_cond:
            self.paused = False
            self.pause_cond.notify()  # Signal the thread to resume.

    # Start the thread.
    def start(self):
        self.thread.start()

    # Wait for the thread to finish.
    def join(self):
        self.thread.join()

# Main class for process management that demonstrates various OS concepts.
class ProcessManager:
    def __init__(self):
        self.running_processes = {}  # Stores information about running processes.
        self.process_threads = {}  # Stores ControlledThreads associated with each process.
        self.threads = []  # List of all ControlledThread objects.
        self.pipe_conn, self.child_conn = multiprocessing.Pipe()  # Inter-process communication (IPC) pipe.
        self.shared_queue = Queue()  # IPC shared queue for communication.
        self.mutex = threading.Semaphore(1)  # Mutex for critical sections.
        self.read_pipe, self.write_pipe = os.pipe()  # Pipes for IPC.
        self.buffer = []  # Buffer for the producer-consumer problem.
        self.empty = threading.Semaphore(5)  # Semaphore for empty slots in the buffer.
        self.filled = threading.Semaphore(0)  # Semaphore for filled slots in the buffer.
        self.setup_logging()  # Setup logging mechanism.
        # Make read pipe non-blocking.
        flags = fcntl.fcntl(self.read_pipe, fcntl.F_GETFL)
        fcntl.fcntl(self.read_pipe, fcntl.F_SETFL, flags | os.O_NONBLOCK)

    # Configure logging for process management activities.
    def setup_logging(self):
        logging.basicConfig(filename='processes.log', level=logging.INFO, format='%(asctime)s - %(message)s')
        self.process_log = logging.getLogger('processes')
        self.process_log.setLevel(logging.INFO)

    # Creates and starts a new thread within the current process.
    def create_thread(self, thread_name):
        def thread_func():
            # Log that the thread is running.
            self.process_log.info(f"Thread '{thread_name}' running")
        controlled_thread = ControlledThread(target=thread_func, name=thread_name)
        self.threads.append(controlled_thread)
        process_pid = os.getpid()
        self.process_threads.setdefault(process_pid, []).append(controlled_thread)
        self.process_log.info(f"Thread '{thread_name}' created successfully")
        controlled_thread.start()

    # Suspend a running process using its PID.
    def suspend_process(self, pid):
        try:
            os.kill(pid, signal.SIGSTOP)
            print(f"Process {pid} suspended.")
        except Exception as e:
            print(f"Failed to suspend process {pid}. Error: {e}")

    # Resume a suspended process using its PID.
    def resume_process(self, pid):
        try:
            os.kill(pid, signal.SIGCONT)
            print(f"Process {pid} resumed.")
        except Exception as e:
            print(f"Failed to resume process {pid}. Error: {e}")

    # Fork a new child process and execute a specified program.
    def create_process(self, process_name):
        pid = os.fork()
        if pid == 0:
            # This block is executed in the child process.
            self.state = ProcessState.RUNNING
            self.parent_pid = os.getppid()
            try:
                os.execlp(process_name, process_name)
            except Exception as e:
                self.process_log.error(f"Child process '{process_name}' with PID {os.getpid()} encountered an error: {str(e)}")
                self.state = ProcessState.SLEEPING
            os._exit(1)
        else:
            # This block is executed in the parent process.
            with self.mutex:
                self.running_processes[pid] = {"name": process_name, "state": ProcessState.RUNNING, "parent_id": os.getpid()}
            self.process_log.info(f"Child process '{process_name}' with PID {pid} created.")

    # List all currently running processes.
    def list_processes(self):
        if not self.running_processes:
            print("No running processes.")
        else:
            print("Running processes:")
            print("{:10} {:20} {:10} {:10}".format("PID", "Name", "State", "Parent PID"))
            for pid, process_info in self.running_processes.items():
                print("{:10} {:20} {:10} {:10}".format(pid, process_info['name'], process_info['state'].value, process_info['parent_id']))

    # Terminate a specified process by PID.
    def terminate_process(self, pid):
        if pid in self.running_processes:
            try:
                os.kill(pid, signal.SIGTERM)
                del self.running_processes[pid]
                print(f"Process with PID {pid} terminated.")
            except Exception as e:
                print(f"Failed to terminate the process with PID {pid}. Error: {e}")
        else:
            print(f"No process found with PID {pid}")


    def send_message(self):
        # Send a message to child processes through IPC using a pipe.
        message = input("Enter the message to send to the child processes: ")
        self.pipe_conn.send(message)  # Send the message through the parent end of the pipe.

    def receive_message(self, timeout=5):
        # Attempt to receive a message from child processes with a specified timeout.
        start_time = time.time()  # Record the start time to calculate timeout.
        while True:
            if self.child_conn.poll(0.5):  # Check if a message is available every half second.
                print(f"Received message from child: {self.child_conn.recv()}")  # Receive and print the message.
                break  # Exit the loop once a message is received.
            elif time.time() - start_time > timeout:
                print("No message received within the timeout period.")  # Inform about timeout.
                break  # Exit the loop if timeout is exceeded.

    def send_data(self):
        # Send data to child processes using a shared queue.
        data = random.randint(1, 100)  # Generate a random integer.
        self.shared_queue.put(data)  # Put the data in the shared queue.
        print(f"Sent data: {data}")  # Log the sent data.

    def receive_data(self):
        # Attempt to receive data from the shared queue.
        if not self.shared_queue.empty():  # Check if the queue is not empty.
            print(f"Received data: {self.shared_queue.get()}")  # Retrieve and print the data.
        else:
            print("No data available to receive.")  # Inform if no data is available.

    def producer_consumer_demo(self):
        # Demonstrate the producer-consumer problem.
        choice = int(input("\nProducer-Consumer Demo\n1. Produce\n2. Consume\nEnter your choice: "))
        if choice == 1:
            self.producer()  # Call the producer method.
        elif choice == 2:
            self.consumer()  # Call the consumer method.
        else:
            print("Invalid choice.")  # Handle invalid choices.

    def producer(self):
        # Produce an item for the buffer in the producer-consumer problem.
        item = random.randint(1, 100)  # Generate a random item.
        self.empty.acquire()  # Decrement the empty semaphore.
        self.buffer.append(item)  # Add the item to the buffer.
        self.filled.release()  # Increment the filled semaphore.
        print(f"Produced item: {item}")  # Log the produced item.
        self.process_log.info(f"Produced item: {item}")  # Log the event.

    def consumer(self):
        # Consume an item from the buffer in the producer-consumer problem.
        self.filled.acquire()  # Decrement the filled semaphore.
        item = self.buffer.pop(0)  # Remove an item from the buffer.
        self.empty.release()  # Increment the empty semaphore.
        print(f"Consumed item: {item}")  # Log the consumed item.
        self.process_log.info(f"Consumed item: {item}")  # Log the event.

    def parallel_text_processing(self, file_path, num_processes=4):
        # Perform parallel processing on a text file.
        start_time = time.time()  # Record start time for performance measurement.
        initial_cpu = psutil.cpu_percent(interval=1)  # Record initial CPU usage.
        initial_memory = psutil.virtual_memory().used / (1024 * 1024)  # Record initial memory usage in MB.

        file_size = os.path.getsize(file_path)  # Get the size of the file.
        segment_size = file_size // num_processes  # Calculate the segment size for each process.

        manager = multiprocessing.Manager()
        shared_counter = manager.dict()  # Shared dictionary for character counting.

        processes = []
        for i in range(num_processes):
            start = i * segment_size
            end = None if i == num_processes - 1 else (i + 1) * segment_size
            # Create a process for each file segment.
            p = multiprocessing.Process(target=self.process_file_segment, args=(file_path, start, end, shared_counter))
            processes.append(p)
            p.start()

        for p in processes:
            p.join()  # Wait for all processes to complete.

        final_counts = dict(shared_counter)  # Convert manager dict to standard dict for final result.
        final_cpu = psutil.cpu_percent(interval=1)  # Record final CPU usage.
        final_memory = psutil.virtual_memory().used / (1024 * 1024)  # Record final memory usage in MB.

        end_time = time.time()  # Record end time for performance measurement.
        # Log and print the results.
        print("Final character counts:")
        for char, count in final_counts.items():
            print(f"Character '{char}': {count}")
        print(f"\nTotal unique characters counted: {len(final_counts)}")
        print(f"Execution time: {end_time - start_time} seconds")
        print("Resource Utilization Metrics:")
        print(f"Initial CPU Usage: {initial_cpu}%")
        print(f"Final CPU Usage: {final_cpu}%")
        print(f"Initial Memory Usage: {initial_memory:.2f} MB")
        print(f"Final Memory Usage: {final_memory:.2f} MB")
        print(f"Memory Usage Change: {final_memory - initial_memory:.2f} MB")

    def process_file_segment(self, file_path, start, end, shared_counter):
        # Process a segment of the file for character counting.
        with open(file_path, 'r') as file:
            file.seek(start)  # Go to the start position of the segment.
            if start != 0:
                file.readline()  # Skip the first line if not at the start to avoid partial lines.
            while True:
                current_position = file.tell()
                if end is not None and current_position >= end:
                    break  # Stop if the end of the segment is reached.
                line = file.readline().upper()  # Read a line and convert to uppercase.
                if not line:  # If the end of the file is reached, stop.
                    break
                for char in line:
                    if char.isalpha():  # Optionally filter to alphabetic characters.
                        shared_counter[char] = shared_counter.get(char, 0) + 1  # Update character counts.

    def display_main_menu(self):
        # Display the main menu of the operating system simulator.
        print("\n+---------------------------------------------------+")
        print("|                 Operating System Simulator        |")
        print("|                                                   |")
        print("|    Manage processes, threads and parallel tasks   |")
        print("+---------------------------------------------------+")
        print("\nChoose an option from the menu:")
        # Options for process and thread management, and IPC demonstrations.
        print("1. Create a new process")
        print("2. Suspend a process")
        print("3. Resume a process")
        print("4. View all processes")
        print("5. Terminate a process")
        print("6. Initiate a new thread")
        print("7. IPC: Send message to child processes")
        print("8. IPC: Fetch message from child process")
        print("9. IPC: Queue - Send data")
        print("10. IPC: Queue - Receive data")
        print("11. Producer-Consumer Demo")
        print("12. Parallel Text File Processing")
        print("13. Exit")  # Option to exit the simulator.

    def run(self):
        # Main loop to run the operating system simulator.
        while True:
            self.display_main_menu()  # Show the main menu.
            choice = input("\nEnter your choice: ")  # Get user input.
            if choice == "1":
                # Create a new process.
                process_name = input("Enter the process name: ")
                self.create_process(process_name)
            elif choice in ["2", "3"]:
                # Suspend or resume a process based on user input.
                try:
                    pid = int(input("Enter the PID of the process: "))
                    if choice == "2":
                        self.suspend_process(pid)  # Suspend the specified process.
                    else:
                        self.resume_process(pid)  # Resume the specified process.
                except ValueError:
                    print("Invalid PID. Please enter a valid integer.")
            elif choice == "4":
                self.list_processes()  # List all running processes.
            elif choice == "5":
                # Terminate a specified process.
                try:
                    pid = int(input("Enter the PID of the process to terminate: "))
                    self.terminate_process(pid)
                except ValueError:
                    print("Invalid PID. Please enter a valid integer.")
            elif choice == "6":
                # Initiate a new thread.
                thread_name = input("Enter the thread name: ")
                self.create_thread(thread_name)
            elif choice == "7":
                self.send_message()  # Send a message to child processes.
            elif choice == "8":
                self.receive_message()  # Receive a message from child processes.
            elif choice == "9":
                self.send_data()  # Send data using IPC queue.
            elif choice == "10":
                self.receive_data()  # Receive data using IPC queue.
            elif choice == "11":
                self.producer_consumer_demo()  # Demonstrate the producer-consumer problem.
            elif choice == "12":
                # Parallel text file processing demonstration.
                file_path = input("Enter the path to the text file: ")
                num_processes = input("Enter the number of processes to use (default 4): ")
                try:
                    num_processes = int(num_processes) if num_processes.isdigit() else 4
                    self.parallel_text_processing(file_path, num_processes)
                except ValueError:
                    print("Invalid number of processes. Please enter a valid integer.")
            elif choice == "13":
                print("Exiting Operating System Simulator...")  # Exit the simulator.
                break  # Break the loop to exit.
            else:
                print("Invalid option, please try again.")  # Handle invalid menu option input.

if __name__ == "__main__":
    manager = ProcessManager()
    manager.run()  # Execute the operating system simulator.
